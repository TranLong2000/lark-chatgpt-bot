// oaSummary.js
const axios = require("axios");

const LARK_APP_ID = process.env.LARK_APP_ID;
const LARK_APP_SECRET = process.env.LARK_APP_SECRET;

// Danh s√°ch t·∫•t c·∫£ c√°c b·∫£ng c·∫ßn t·ªïng h·ª£p
const BASES = [
  { appToken: "Um8Zb07ayaDFAws9BRFlbZtngZf", tableId: "tblc0IuDKdYrVGqo" },
  { appToken: "ISmubRaYVapU5Js4rgmlMEaMgxd", tableId: "tblwV1amW2IKE8S9" },
  { appToken: "LuXxbG9NHaHWerspe3llcnnMgze", tableId: "tblINGRM9I5ns5iM" },
];

async function getTenantToken() {
  const res = await axios.post("https://open.larksuite.com/open-apis/auth/v3/tenant_access_token/internal", {
    app_id: LARK_APP_ID,
    app_secret: LARK_APP_SECRET,
  });
  return res.data.tenant_access_token;
}

async function fetchAllUnderReviewRequests() {
  const accessToken = await getTenantToken();
  let allRecords = [];

  for (const base of BASES) {
    try {
      const response = await axios.get(
        `https://open.larksuite.com/open-apis/bitable/v1/apps/${base.appToken}/tables/${base.tableId}/records?page_size=100`,
        {
          headers: {
            Authorization: `Bearer ${accessToken}`,
          },
        }
      );

      const records = response.data.data.items;

      const underReview = records.filter(
        (r) => r.fields["Status"] && r.fields["Status"].toLowerCase() === "under review"
      );

      allRecords = allRecords.concat(underReview);
    } catch (error) {
      console.error(`‚ùå L·ªói khi ƒë·ªçc base ${base.appToken}:`, error.response?.data || error.message);
    }
  }

  return allRecords;
}

async function fetchUnderReviewRequests() {
  const allRecords = await fetchAllUnderReviewRequests();

  if (allRecords.length === 0) {
    return "‚úÖ Hi·ªán t·∫°i kh√¥ng c√≥ ƒë∆°n n√†o ƒëang *Under Review* trong t·∫•t c·∫£ c√°c b·∫£ng.";
  }

  const grouped = {};

  allRecords.forEach((r) => {
    const fields = r.fields;
    const requester = fields["Requester"] || "Kh√¥ng r√µ";
    const requestNo = fields["Request No."] || "Kh√¥ng r√µ";
    const assignee = fields["Current assignee"] || "Kh√¥ng r√µ";

    if (!grouped[requester]) grouped[requester] = [];
    grouped[requester].push({ requestNo, assignee });
  });

  let message = `üìã **T·ªïng h·ª£p c√°c Request ƒëang *Under Review* t·ª´ 3 b·∫£ng:**\n\n`;

  for (const requester in grouped) {
    message += `üë§ ${requester}\n`;
    grouped[requester].forEach((item) => {
      message += `- ${item.requestNo} ‚Üí Ng∆∞·ªùi duy·ªát: ${item.assignee}\n`;
    });
    message += `\n`;
  }

  return message.trim();
}

module.exports = { fetchUnderReviewRequests };
